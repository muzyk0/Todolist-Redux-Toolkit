{"version":3,"sources":["serviceWorker.ts","features/CommonActions/App.ts","utils/redux-utils.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Application/selectors.ts","api/types.ts","api/todolists-api.ts","features/Auth/selectors.tsx","utils/error-utils.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","features/TodoListsList/todolists-reducer.ts","features/TodoListsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListsList.tsx","features/TodoListsList/index.tsx","app/App.tsx","app/reducers.ts","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","appActions","setAppStatus","createAction","setAppError","useAppDispatch","useDispatch","useActions","actions","dispatch","useMemo","bindActionCreators","Alert","props","elevation","variant","ErrorSnackbar","error","useSelector","state","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","selectStatus","status","selectIsInitialized","isInitialized","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","selectIsLoggedIn","auth","isLoggedIn","handleAsyncServerAppError","thunkAPI","showError","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","login","createAsyncThunk","param","a","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","reducer","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","color","authReducer","initializeApp","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","todolist","changeTodolistTitleTC","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","style","marginLeft","ControlPoint","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","className","position","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","getTasksForTodoList","renderFilterButton","buttonFilter","text","Paper","padding","paddingTop","TodolistsList","addTodolistCallback","spacing","flexWrap","overflowX","allTodolistTasks","width","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","App","classes","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","maxWidth","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9e54ea39.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web appActions is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different appActions. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. Application is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import { createAction } from '@reduxjs/toolkit'\nimport { RequestStatusType } from '../Application/application-reducer'\n\nconst setAppStatus = createAction<{ status: RequestStatusType }>(\n    'appActions/setAppStatus'\n)\nconst setAppError = createAction<{ error: string | null }>(\n    'appActions/setAppError'\n)\n\nexport const appActions = {\n    setAppStatus,\n    setAppError,\n}\n","import { useDispatch } from 'react-redux'\nimport { AppDispatchType } from './types'\nimport { ActionCreatorsMapObject, bindActionCreators } from 'redux'\nimport { useMemo } from 'react'\n\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\n\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\n    const dispatch = useAppDispatch()\n\n    return useMemo(() => {\n        return bindActionCreators(actions, dispatch)\n    }, [actions, dispatch])\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\nimport { useSelector } from 'react-redux'\nimport { appActions } from '../../features/CommonActions/App'\nimport { AppRootStateType } from '../../utils/types'\nimport { useActions } from '../../utils/redux-utils'\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, string | null>(\n        (state) => state.app.error\n    )\n    const { setAppError } = useActions(appActions)\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        setAppError({ error: null })\n    }\n\n    const isOpen = error !== null\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import { AppRootStateType } from '../../utils/types'\n\nexport const selectStatus = (state: AppRootStateType) => state.app.status\nexport const selectIsInitialized = (state: AppRootStateType) =>\n    state.app.isInitialized\n","export type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type FieldErrorType = { field: string; error: string }\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors?: Array<FieldErrorType>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3,\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4,\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport type GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import axios from 'axios'\nimport {\n    GetTasksResponse,\n    LoginParamsType,\n    ResponseType,\n    TaskType,\n    TodolistType,\n    UpdateTaskModelType,\n} from './types'\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        'API-KEY': '5a0cdbca-9689-4621-a5f0-b22378b0e052',\n    },\n}\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    ...settings,\n})\n\n// api\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists')\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodolistType }>>(\n            'todo-lists',\n            {\n                title: title,\n            }\n        )\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${id}`, { title: title })\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(\n            `todo-lists/${todolistId}/tasks/${taskId}`\n        )\n    },\n    createTask(todolistId: string, taskTitile: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(\n            `todo-lists/${todolistId}/tasks`,\n            { title: taskTitile }\n        )\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(\n            `todo-lists/${todolistId}/tasks/${taskId}`,\n            model\n        )\n    },\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{ userId?: number }>>(\n            'auth/login',\n            data\n        )\n    },\n    logout() {\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\n    },\n    me() {\n        return instance.get<\n            ResponseType<{ id: number; email: string; login: string }>\n        >('auth/me')\n    },\n}\n","import { AppRootStateType } from '../../utils/types'\n\nexport const selectIsLoggedIn = (state: AppRootStateType) =>\n    state.auth.isLoggedIn\n","import { appActions } from '../features/CommonActions/App'\nimport { AxiosError } from 'axios'\nimport { ResponseType } from '../api/types'\n\n// original type:\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\ntype ThunkAPIType = {\n    dispatch: (action: any) => any\n    rejectWithValue: Function\n}\n\nexport const handleAsyncServerAppError = <D>(\n    data: ResponseType<D>,\n    thunkAPI: ThunkAPIType,\n    showError = true\n) => {\n    if (showError) {\n        thunkAPI.dispatch(\n            appActions.setAppError({\n                error: data.messages.length\n                    ? data.messages[0]\n                    : 'Some error occurred',\n            })\n        )\n    }\n    thunkAPI.dispatch(appActions.setAppStatus({ status: 'failed' }))\n    return thunkAPI.rejectWithValue({\n        errors: data.messages,\n        fieldsErrors: data.fieldsErrors,\n    })\n}\n\nexport const handleAsyncServerNetworkError = (\n    error: AxiosError,\n    thunkAPI: ThunkAPIType,\n    showError = true\n) => {\n    if (showError) {\n        thunkAPI.dispatch(\n            appActions.setAppError({\n                error: error.message ? error.message : 'Some error occurred',\n            })\n        )\n    }\n    thunkAPI.dispatch(appActions.setAppStatus({ status: 'failed' }))\n\n    return thunkAPI.rejectWithValue({\n        errors: [error.message],\n        fieldsErrors: undefined,\n    })\n}\n","import { authAPI } from '../../api/todolists-api'\nimport {\n    handleAsyncServerAppError,\n    handleAsyncServerNetworkError,\n} from '../../utils/error-utils'\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { FieldErrorType, LoginParamsType } from '../../api/types'\nimport { appActions } from '../CommonActions/App'\n\nconst { setAppStatus } = appActions\n\nexport const login = createAsyncThunk<\n    undefined,\n    LoginParamsType,\n    {\n        rejectValue: {\n            errors: Array<string>\n            fieldsErrors?: Array<FieldErrorType>\n        }\n    }\n>('auth/login', async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({ status: 'loading' }))\n    try {\n        const res = await authAPI.login(param)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }))\n            return\n        } else {\n            return handleAsyncServerAppError(res.data, thunkAPI)\n        }\n    } catch (error) {\n        return handleAsyncServerNetworkError(error, thunkAPI)\n    }\n})\nexport const logout = createAsyncThunk(\n    'auth/logout',\n    async (param, thunkAPI) => {\n        thunkAPI.dispatch(setAppStatus({ status: 'loading' }))\n        try {\n            const res = await authAPI.logout()\n            if (res.data.resultCode === 0) {\n                thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }))\n                return\n            } else {\n                return handleAsyncServerAppError(res.data, thunkAPI)\n            }\n        } catch (error) {\n            return handleAsyncServerNetworkError(error, thunkAPI)\n        }\n    }\n)\n\nexport const asyncActions = {\n    login,\n    logout,\n}\n\nexport const slice = createSlice({\n    name: 'auth',\n    initialState: {\n        isLoggedIn: false,\n    },\n    reducers: {\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\n            state.isLoggedIn = action.payload.value\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(login.fulfilled, (state) => {\n                state.isLoggedIn = true\n            })\n            .addCase(logout.fulfilled, (state) => {\n                state.isLoggedIn = false\n            })\n    },\n})\n\nexport const authReducer = slice.reducer\nexport const { setIsLoggedIn } = slice.actions\n","import React from 'react'\nimport {\n    Button,\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    FormLabel,\n    Grid,\n    TextField,\n} from '@material-ui/core'\nimport { FormikHelpers, useFormik } from 'formik'\nimport { useSelector } from 'react-redux'\nimport { login } from './auth-reducer'\nimport { Redirect } from 'react-router-dom'\nimport { selectIsLoggedIn } from './selectors'\nimport { authActions } from './index'\nimport { useAppDispatch } from '../../utils/redux-utils'\n\ntype FormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const Login = () => {\n    const dispatch = useAppDispatch()\n\n    const isLoggedIn = useSelector(selectIsLoggedIn)\n\n    const formik = useFormik({\n        validate: (values) => {\n            if (!values.email) {\n                return {\n                    email: 'Email is required',\n                }\n            }\n            if (!values.password) {\n                return {\n                    password: 'Password is required',\n                }\n            }\n        },\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n        },\n        onSubmit: async (\n            values: FormValuesType,\n            formikHelpers: FormikHelpers<FormValuesType>\n        ) => {\n            const resultAction = await dispatch(authActions.login(values))\n\n            if (login.rejected.match(resultAction)) {\n                if (resultAction.payload?.fieldsErrors?.length) {\n                    const error = resultAction.payload?.fieldsErrors[0]\n                    formikHelpers.setFieldError(error.field, error.error)\n                }\n            }\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'} />\n    }\n\n    return (\n        <Grid container justify=\"center\">\n            <Grid item xs={4}>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormControl>\n                        <FormLabel>\n                            <p>\n                                To log in get registered{' '}\n                                <a\n                                    href={\n                                        'https://social-network.samuraijs.com/'\n                                    }\n                                    target={'_blank'}\n                                    rel=\"noreferrer\"\n                                >\n                                    here\n                                </a>\n                            </p>\n                            <p>or use common test account credentials:</p>\n                            <p> Email: free@samuraijs.com</p>\n                            <p>Password: free</p>\n                        </FormLabel>\n                        <FormGroup>\n                            <TextField\n                                label=\"Email\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n                            {formik.errors.email ? (\n                                <div>{formik.errors.email}</div>\n                            ) : null}\n                            <TextField\n                                type=\"password\"\n                                label=\"Password\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('password')}\n                            />\n                            {formik.errors.password ? (\n                                <div>{formik.errors.password}</div>\n                            ) : null}\n                            <FormControlLabel\n                                label={'Remember me'}\n                                control={\n                                    <Checkbox\n                                        {...formik.getFieldProps('rememberMe')}\n                                        checked={formik.values.rememberMe}\n                                    />\n                                }\n                            />\n                            <Button\n                                type={'submit'}\n                                variant={'contained'}\n                                color={'primary'}\n                            >\n                                Login\n                            </Button>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Grid>\n        </Grid>\n    )\n}\n","import * as authSelectors from './selectors'\nimport { Login } from './Login'\nimport { asyncActions, slice } from './auth-reducer'\n\nconst authActions = {\n    ...asyncActions,\n    ...slice.actions,\n}\n\nconst authReducer = slice.reducer\n\nexport { authSelectors, Login, authActions, authReducer }\n","import { authAPI } from '../../api/todolists-api'\nimport { authActions } from '../Auth'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { appActions } from '../CommonActions/App'\n\nconst initializeApp = createAsyncThunk(\n    'application/initializeApp',\n    async (param, { dispatch }) => {\n        const res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            dispatch(authActions.setIsLoggedIn({ value: true }))\n        } else {\n        }\n    }\n)\n\nexport const asyncActions = {\n    initializeApp,\n}\n\nexport const slice = createSlice({\n    name: 'app',\n    initialState: {\n        status: 'idle',\n        error: null,\n        isInitialized: false,\n    } as InitialStateType,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(initializeApp.fulfilled, (state, action) => {\n                state.isInitialized = true\n            })\n            .addCase(appActions.setAppStatus, (state, action) => {\n                state.status = action.payload.status\n            })\n            .addCase(appActions.setAppError, (state, action) => {\n                state.error = action.payload.error\n            })\n    },\n})\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\n    isInitialized: boolean\n}\n","import * as appSelectors from './selectors'\nimport { RequestStatusType as T1, slice } from './application-reducer'\nimport { asyncActions } from './application-reducer'\n\nconst appReducer = slice.reducer\nconst actions = slice.actions\n\nconst appActions = {\n    ...actions,\n    ...asyncActions,\n}\nexport type RequestStatusType = T1\n\nexport { appSelectors, appReducer, appActions }\n","import { todolistsAPI } from '../../api/todolists-api'\nimport { RequestStatusType } from '../Application'\nimport { appActions } from '../CommonActions/App'\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n    handleAsyncServerAppError,\n    handleAsyncServerNetworkError,\n} from '../../utils/error-utils'\nimport { TodolistType } from '../../api/types'\nimport { ThunkError } from '../../utils/types'\n\nconst { setAppStatus } = appActions\n\nconst fetchTodolistsTC = createAsyncThunk<\n    { todolists: TodolistType[] },\n    undefined,\n    ThunkError\n>('todolists/fetchTodolists', async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({ status: 'loading' }))\n    try {\n        const res = await todolistsAPI.getTodolists()\n        thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }))\n        return { todolists: res.data }\n    } catch (error) {\n        return handleAsyncServerNetworkError(error, thunkAPI)\n    }\n})\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>(\n    'todolists/removeTodolist',\n    async (todolistId, { dispatch, rejectWithValue }) => {\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\n        dispatch(setAppStatus({ status: 'loading' }))\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n        dispatch(\n            changeTodolistEntityStatus({ id: todolistId, status: 'loading' })\n        )\n        await todolistsAPI.deleteTodolist(todolistId)\n        //скажем глобально приложению, что асинхронная операция завершена\n        dispatch(setAppStatus({ status: 'succeeded' }))\n        return { id: todolistId }\n    }\n)\nconst addTodolistTC = createAsyncThunk<\n    { todolist: TodolistType },\n    string,\n    ThunkError\n>('todolists/addTodolist', async (title, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({ status: 'loading' }))\n    try {\n        const res = await todolistsAPI.createTodolist(title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }))\n            return { todolist: res.data.data.item }\n        } else {\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\n        }\n    } catch (error) {\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\n    }\n})\nconst changeTodolistTitleTC = createAsyncThunk(\n    'todolists/changeTodolistTitle',\n    async (param: { id: string; title: string }, thunkAPI) => {\n        try {\n            const res = await todolistsAPI.updateTodolist(param.id, param.title)\n            if (res.data.resultCode === 0) {\n                thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }))\n                return { id: param.id, title: param.title }\n            } else {\n                return handleAsyncServerAppError(res.data, thunkAPI)\n            }\n        } catch (error) {\n            return handleAsyncServerNetworkError(error, thunkAPI, false)\n        }\n    }\n)\n\nexport const asyncActions = {\n    fetchTodolistsTC,\n    removeTodolistTC,\n    addTodolistTC,\n    changeTodolistTitleTC,\n}\n\nexport const slice = createSlice({\n    name: 'todolists',\n    initialState: [] as Array<TodolistDomainType>,\n    reducers: {\n        changeTodolistFilter(\n            state,\n            action: PayloadAction<{ id: string; filter: FilterValuesType }>\n        ) {\n            const index = state.findIndex((tl) => tl.id === action.payload.id)\n            state[index].filter = action.payload.filter\n        },\n        changeTodolistEntityStatus(\n            state,\n            action: PayloadAction<{ id: string; status: RequestStatusType }>\n        ) {\n            const index = state.findIndex((tl) => tl.id === action.payload.id)\n            state[index].entityStatus = action.payload.status\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\n                return action.payload.todolists.map((tl) => ({\n                    ...tl,\n                    filter: 'all',\n                    entityStatus: 'idle',\n                }))\n            })\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\n                const index = state.findIndex(\n                    (tl) => tl.id === action.payload.id\n                )\n                if (index > -1) {\n                    state.splice(index, 1)\n                }\n            })\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\n                state.unshift({\n                    ...action.payload.todolist,\n                    filter: 'all',\n                    entityStatus: 'idle',\n                })\n            })\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\n                const index = state.findIndex(\n                    (tl) => tl.id === action.payload.id\n                )\n                state[index].title = action.payload.title\n            })\n    },\n})\n\nexport const { changeTodolistFilter, changeTodolistEntityStatus } =\n    slice.actions\n\nexport type FilterValuesType = 'all' | 'active' | 'completed'\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n","import { todolistsAPI } from '../../api/todolists-api'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { appActions } from '../CommonActions/App'\nimport {\n    handleAsyncServerAppError,\n    handleAsyncServerNetworkError,\n} from '../../utils/error-utils'\nimport { asyncActions as asyncTodolistsActions } from './todolists-reducer'\nimport { AppRootStateType, ThunkError } from '../../utils/types'\nimport {\n    TaskPriorities,\n    TaskStatuses,\n    TaskType,\n    UpdateTaskModelType,\n} from '../../api/types'\n\nconst initialState: TasksStateType = {}\n\nexport const fetchTasks = createAsyncThunk<\n    { tasks: TaskType[]; todolistId: string },\n    string,\n    ThunkError\n>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\n    thunkAPI.dispatch(appActions.setAppStatus({ status: 'loading' }))\n    try {\n        const res = await todolistsAPI.getTasks(todolistId)\n        const tasks = res.data.items\n        thunkAPI.dispatch(appActions.setAppStatus({ status: 'succeeded' }))\n        return { tasks, todolistId }\n    } catch (error) {\n        return handleAsyncServerNetworkError(error, thunkAPI)\n    }\n})\nexport const removeTask = createAsyncThunk<\n    { taskId: string; todolistId: string },\n    { taskId: string; todolistId: string },\n    ThunkError\n>('tasks/removeTask', async (param, thunkAPI) => {\n    await todolistsAPI.deleteTask(param.todolistId, param.taskId)\n    return { taskId: param.taskId, todolistId: param.todolistId }\n})\nexport const addTask = createAsyncThunk<\n    TaskType,\n    { title: string; todolistId: string },\n    ThunkError\n>('tasks/addTask', async (param, thunkAPI) => {\n    thunkAPI.dispatch(appActions.setAppStatus({ status: 'loading' }))\n    try {\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(appActions.setAppStatus({ status: 'succeeded' }))\n            return res.data.data.item\n        } else {\n            handleAsyncServerAppError(res.data, thunkAPI, false)\n            return thunkAPI.rejectWithValue({\n                errors: res.data.messages,\n                fieldsErrors: res.data.fieldsErrors,\n            })\n        }\n    } catch (err) {\n        return handleAsyncServerNetworkError(err, thunkAPI, false)\n    }\n})\nexport const updateTask = createAsyncThunk(\n    'tasks/updateTask',\n    async (\n        param: {\n            taskId: string\n            model: UpdateDomainTaskModelType\n            todolistId: string\n        },\n        thunkAPI\n    ) => {\n        const state = thunkAPI.getState() as AppRootStateType\n\n        const task = state.tasks[param.todolistId].find(\n            (t) => t.id === param.taskId\n        )\n        if (!task) {\n            return thunkAPI.rejectWithValue('task not found in the state')\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...param.model,\n        }\n\n        const res = await todolistsAPI.updateTask(\n            param.todolistId,\n            param.taskId,\n            apiModel\n        )\n        try {\n            if (res.data.resultCode === 0) {\n                return param\n            } else {\n                return handleAsyncServerAppError(res.data, thunkAPI)\n            }\n        } catch (error) {\n            return handleAsyncServerNetworkError(error, thunkAPI)\n        }\n    }\n)\n\nexport const asyncActions = {\n    fetchTasks,\n    removeTask,\n    addTask,\n    updateTask,\n}\n\nexport const slice = createSlice({\n    name: 'tasks',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(\n                asyncTodolistsActions.addTodolistTC.fulfilled,\n                (state, action) => {\n                    state[action.payload.todolist.id] = []\n                }\n            )\n            .addCase(\n                asyncTodolistsActions.removeTodolistTC.fulfilled,\n                (state, action) => {\n                    delete state[action.payload.id]\n                }\n            )\n            .addCase(\n                asyncTodolistsActions.fetchTodolistsTC.fulfilled,\n                (state, action) => {\n                    action.payload.todolists.forEach((tl: any) => {\n                        state[tl.id] = []\n                    })\n                }\n            )\n            .addCase(fetchTasks.fulfilled, (state, action) => {\n                state[action.payload.todolistId] = action.payload.tasks\n            })\n            .addCase(removeTask.fulfilled, (state, action) => {\n                const tasks = state[action.payload.todolistId]\n                const index = tasks.findIndex(\n                    (t) => t.id === action.payload.taskId\n                )\n                if (index > -1) {\n                    tasks.splice(index, 1)\n                }\n            })\n            .addCase(addTask.fulfilled, (state, action) => {\n                state[action.payload.todoListId].unshift(action.payload)\n            })\n            .addCase(updateTask.fulfilled, (state, action) => {\n                const tasks = state[action.payload.todolistId]\n                const index = tasks.findIndex(\n                    (t) => t.id === action.payload.taskId\n                )\n                if (index > -1) {\n                    tasks[index] = { ...tasks[index], ...action.payload.model }\n                }\n            })\n    },\n})\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport { IconButton, TextField } from '@material-ui/core'\nimport { ControlPoint } from '@material-ui/icons'\n\nexport type AddItemFormSubmitHelperType = {\n    setError: (error: string) => void\n    setTitle: (title: string) => void\n}\nexport type AddItemFormPropsType = {\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(function ({\n    addItem,\n    disabled = false,\n}: AddItemFormPropsType) {\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = async () => {\n        if (title.trim() !== '') {\n            addItem(title, { setError, setTitle })\n        } else {\n            setError('Title is required')\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n        if (e.key === 'Enter') {\n            addItemHandler()\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                variant=\"outlined\"\n                disabled={disabled}\n                error={!!error}\n                value={title}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                label=\"Title\"\n                helperText={error}\n            />\n            <IconButton\n                color=\"primary\"\n                onClick={addItemHandler}\n                disabled={disabled}\n                style={{ marginLeft: '5px' }}\n            >\n                <ControlPoint />\n            </IconButton>\n        </div>\n    )\n})\n","import React, { useState } from 'react'\nimport { TextField } from '@material-ui/core'\n\nexport type EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false)\n    let [title, setTitle] = useState(props.value)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.value)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const changeTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            setEditMode(false)\n            props.onChange(title)\n        }\n    }\n\n    return editMode ? (\n        <TextField\n            color={'secondary'}\n            value={title}\n            onChange={changeTitle}\n            autoFocus\n            onBlur={activateViewMode}\n            onKeyPress={onEnter}\n        />\n    ) : (\n        <span onDoubleClick={activateEditMode}>{props.value}</span>\n    )\n})\n","import React, { ChangeEvent, useCallback } from 'react'\nimport { Checkbox, IconButton } from '@material-ui/core'\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\nimport { Delete } from '@material-ui/icons'\nimport { tasksActions } from '../../index'\nimport { TaskStatuses, TaskType } from '../../../../api/types'\nimport { useActions } from '../../../../utils/redux-utils'\n\nexport type TaskPropsType = {\n    task: TaskType\n    todolistId: string\n}\n\nexport const Task = React.memo((props: TaskPropsType) => {\n    const { updateTask, removeTask } = useActions(tasksActions)\n\n    const onClickHandler = useCallback(\n        () =>\n            removeTask({ taskId: props.task.id, todolistId: props.todolistId }),\n        [props.task.id, props.todolistId, removeTask]\n    )\n\n    const onChangeHandler = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => {\n            updateTask({\n                taskId: props.task.id,\n                model: {\n                    status: e.currentTarget.checked\n                        ? TaskStatuses.Completed\n                        : TaskStatuses.New,\n                },\n                todolistId: props.todolistId,\n            })\n        },\n        [props.task.id, props.todolistId, updateTask]\n    )\n\n    const onTitleChangeHandler = useCallback(\n        (newValue: string) => {\n            updateTask({\n                taskId: props.task.id,\n                model: { title: newValue },\n                todolistId: props.todolistId,\n            })\n        },\n        [props.task.id, props.todolistId, updateTask]\n    )\n\n    return (\n        <div\n            key={props.task.id}\n            className={\n                props.task.status === TaskStatuses.Completed ? 'is-done' : ''\n            }\n            style={{ position: 'relative' }}\n        >\n            <Checkbox\n                checked={props.task.status === TaskStatuses.Completed}\n                color=\"primary\"\n                onChange={onChangeHandler}\n            />\n\n            <EditableSpan\n                value={props.task.title}\n                onChange={onTitleChangeHandler}\n            />\n            <IconButton\n                size={'small'}\n                onClick={onClickHandler}\n                style={{ position: 'absolute', top: '2px', right: '2px' }}\n            >\n                <Delete fontSize={'small'} />\n            </IconButton>\n        </div>\n    )\n})\n","import React, { useCallback, useEffect } from 'react'\nimport {\n    AddItemForm,\n    AddItemFormSubmitHelperType,\n} from '../../../components/AddItemForm/AddItemForm'\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\nimport { Button, IconButton, Paper, PropTypes } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { Task } from './Task/Task'\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\nimport { tasksActions, todolistsActions } from '../index'\nimport { TaskStatuses, TaskType } from '../../../api/types'\nimport { useActions, useAppDispatch } from '../../../utils/redux-utils'\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(function ({\n    demo = false,\n    ...props\n}: PropsType) {\n    const { fetchTasks } = useActions(tasksActions)\n    const { changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC } =\n        useActions(todolistsActions)\n\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        if (demo) {\n            return\n        }\n        if (!props.tasks.length) {\n            fetchTasks(props.todolist.id)\n        }\n    }, [demo, fetchTasks, props.todolist.id, props.tasks.length])\n\n    const addTaskCallback = useCallback(\n        async (title: string, helper: AddItemFormSubmitHelperType) => {\n            let thunk = tasksActions.addTask({\n                title: title,\n                todolistId: props.todolist.id,\n            })\n            const resultAction = await dispatch(thunk)\n\n            if (tasksActions.addTask.rejected.match(resultAction)) {\n                if (resultAction.payload?.errors?.length) {\n                    const errorMessage = resultAction.payload?.errors[0]\n                    helper.setError(errorMessage)\n                } else {\n                    helper.setError('Some error occured')\n                }\n            } else {\n                helper.setTitle('')\n            }\n        },\n        [props.todolist.id, dispatch]\n    )\n\n    const removeTodolist = () => {\n        removeTodolistTC(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback(\n        (title: string) => {\n            changeTodolistTitleTC({ id: props.todolist.id, title: title })\n        },\n        [props.todolist.id, changeTodolistTitleTC]\n    )\n\n    const onFilterButtonClickHandler = useCallback(\n        (filter: FilterValuesType) =>\n            changeTodolistFilter({\n                filter: filter,\n                id: props.todolist.id,\n            }),\n        [props.todolist.id, changeTodolistFilter]\n    )\n\n    const getTasksForTodoList = (tasks: Array<TaskType>) => {\n        switch (props.todolist.filter) {\n            case 'active':\n                return props.tasks.filter((t) => t.status === TaskStatuses.New)\n            case 'completed':\n                return props.tasks.filter(\n                    (t) => t.status === TaskStatuses.Completed\n                )\n            default:\n                return tasks\n        }\n    }\n\n    const renderFilterButton = (\n        buttonFilter: FilterValuesType,\n        color: PropTypes.Color,\n        text: string\n    ) => {\n        return (\n            <Button\n                variant={\n                    props.todolist.filter === buttonFilter\n                        ? 'contained'\n                        : 'text'\n                }\n                onClick={() => onFilterButtonClickHandler(buttonFilter)}\n                color={color}\n            >\n                {text}\n            </Button>\n        )\n    }\n\n    return (\n        <Paper style={{ padding: '10px', position: 'relative' }}>\n            <IconButton\n                size={'small'}\n                onClick={removeTodolist}\n                disabled={props.todolist.entityStatus === 'loading'}\n                style={{ position: 'absolute', right: '5px', top: '5px' }}\n            >\n                <Delete fontSize={'small'} />\n            </IconButton>\n            <h3>\n                <EditableSpan\n                    value={props.todolist.title}\n                    onChange={changeTodolistTitle}\n                />\n            </h3>\n            <AddItemForm\n                addItem={addTaskCallback}\n                disabled={props.todolist.entityStatus === 'loading'}\n            />\n            <div>\n                {getTasksForTodoList(props.tasks).map((t) => (\n                    <Task key={t.id} task={t} todolistId={props.todolist.id} />\n                ))}\n                {!getTasksForTodoList(props.tasks).length && (\n                    <div style={{ padding: '10px', color: 'grey' }}>\n                        No task\n                    </div>\n                )}\n            </div>\n            <div style={{ paddingTop: '10px' }}>\n                {renderFilterButton('all', 'default', 'All')}\n                {renderFilterButton('active', 'primary', 'Active')}\n                {renderFilterButton('completed', 'secondary', 'Completed')}\n            </div>\n        </Paper>\n    )\n})\n","import React, { useCallback, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { TodolistDomainType } from './todolists-reducer'\nimport { TasksStateType } from './tasks-reducer'\nimport { Grid } from '@material-ui/core'\nimport {\n    AddItemForm,\n    AddItemFormSubmitHelperType,\n} from '../../components/AddItemForm/AddItemForm'\nimport { Redirect } from 'react-router-dom'\nimport { selectIsLoggedIn } from '../Auth/selectors'\nimport { todolistsActions } from './index'\nimport { AppRootStateType } from '../../utils/types'\nimport { useActions, useAppDispatch } from '../../utils/redux-utils'\nimport { Todolist } from './TodoList/TodoList'\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\n        (state) => state.todolists\n    )\n    const tasks = useSelector<AppRootStateType, TasksStateType>(\n        (state) => state.tasks\n    )\n    const isLoggedIn = useSelector(selectIsLoggedIn)\n\n    const dispatch = useAppDispatch()\n\n    const { fetchTodolistsTC } = useActions(todolistsActions)\n\n    const addTodolistCallback = useCallback(\n        async (title: string, helper: AddItemFormSubmitHelperType) => {\n            let thunk = todolistsActions.addTodolistTC(title)\n            const resultAction = await dispatch(thunk)\n\n            if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\n                if (resultAction.payload?.errors?.length) {\n                    const errorMessage = resultAction.payload?.errors[0]\n                    helper.setError(errorMessage)\n                } else {\n                    helper.setError('Some error occured')\n                }\n            } else {\n                helper.setTitle('')\n            }\n        },\n        [dispatch]\n    )\n\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return\n        }\n        if (!todolists.length) {\n            fetchTodolistsTC()\n        }\n    }, [demo, fetchTodolistsTC, isLoggedIn, todolists.length])\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n    return (\n        <>\n            <Grid container style={{ padding: '20px 0' }}>\n                <AddItemForm addItem={addTodolistCallback} />\n            </Grid>\n            <Grid\n                container\n                spacing={3}\n                style={{ flexWrap: 'nowrap', overflowX: 'scroll' }}\n            >\n                {todolists.map((tl) => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return (\n                        <Grid item key={tl.id}>\n                            <div style={{ width: '300px' }}>\n                                <Todolist\n                                    todolist={tl}\n                                    tasks={allTodolistTasks}\n                                    demo={demo}\n                                />\n                            </div>\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </>\n    )\n}\n","import {\n    asyncActions as todolistsAsyncActions,\n    slice as todolistsSlice,\n} from './todolists-reducer'\nimport {\n    asyncActions as tasksAsyncActions,\n    slice as tasksSlice,\n} from './tasks-reducer'\nimport { TodolistsList } from './TodoListsList'\n\nconst todolistsActions = {\n    ...todolistsAsyncActions,\n    ...todolistsSlice.actions,\n}\nconst tasksActions = {\n    ...tasksAsyncActions,\n    ...tasksSlice.actions,\n}\n\nconst todolistsReducer = todolistsSlice.reducer\nconst tasksReducer = tasksSlice.reducer\n\nexport {\n    tasksActions,\n    todolistsActions,\n    TodolistsList,\n    todolistsReducer,\n    tasksReducer,\n}\n","import React, { useCallback, useEffect } from 'react'\nimport './App.css'\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    createStyles,\n    IconButton,\n    LinearProgress,\n    makeStyles,\n    Theme,\n    Toolbar,\n    Typography,\n} from '@material-ui/core'\nimport { Menu } from '@material-ui/icons'\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\nimport { useSelector } from 'react-redux'\nimport { appActions } from '../features/Application'\nimport { Route, Switch } from 'react-router-dom'\nimport { authActions, authSelectors, Login } from '../features/Auth'\nimport {\n    selectIsInitialized,\n    selectStatus,\n} from '../features/Application/selectors'\nimport { useActions } from '../utils/redux-utils'\nimport { TodolistsList } from '../features/TodoListsList'\n\ntype PropsType = {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    })\n)\n\nconst App: React.FC<PropsType> = () => {\n    const classes = useStyles()\n    const status = useSelector(selectStatus)\n    const isInitialized = useSelector(selectIsInitialized)\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\n\n    const { logout } = useActions(authActions)\n    const { initializeApp } = useActions(appActions)\n\n    useEffect(() => {\n        if (!isInitialized) {\n            initializeApp()\n        }\n    }, [isInitialized, initializeApp])\n\n    const logoutHandler = useCallback(() => {\n        logout()\n    }, [logout])\n\n    if (!isInitialized) {\n        return (\n            <div\n                style={{\n                    position: 'fixed',\n                    top: '30%',\n                    textAlign: 'center',\n                    width: '100%',\n                }}\n            >\n                <CircularProgress />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar />\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                    >\n                        <Menu />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        TodoList\n                    </Typography>\n                    {isLoggedIn && (\n                        <Button color=\"inherit\" onClick={logoutHandler}>\n                            Log out\n                        </Button>\n                    )}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress />}\n            </AppBar>\n            <Container maxWidth={'xl'}>\n                <Switch>\n                    <Route\n                        exact\n                        path={'/'}\n                        render={() => <TodolistsList demo={false} />}\n                    />\n                    <Route exact path={'/login'} render={() => <Login />} />\n\n                    <Route\n                        exact\n                        path={'/404'}\n                        render={() => <h1>404: PAGE NOT FOUND</h1>}\n                    />\n                    {/*<Redirect from={'*'} to={'/404'}/>*/}\n                </Switch>\n            </Container>\n        </div>\n    )\n}\n\nexport default App\n","// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nimport { combineReducers } from 'redux'\nimport { appReducer } from '../features/Application'\nimport { authReducer } from '../features/Auth'\nimport { tasksReducer, todolistsReducer } from '../features/TodoListsList'\n\n// непосредственно создаём store\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nexport const rootReducer = combineReducers({\n    app: appReducer,\n    auth: authReducer,\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n})\n","import thunkMiddleware from 'redux-thunk'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { rootReducer } from './reducers'\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().prepend(thunkMiddleware),\n})\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./reducers', () => {\n        store.replaceReducer(rootReducer)\n    })\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './app/App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport { HashRouter } from 'react-router-dom'\n\nconst rerenderEntireTree = () => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <HashRouter>\n                <App />\n            </HashRouter>\n        </Provider>,\n        document.getElementById('root')\n    )\n}\nrerenderEntireTree()\n\n// If you want your appActions to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./app/App', () => {\n        rerenderEntireTree()\n    })\n}\n"],"sourceRoot":""}