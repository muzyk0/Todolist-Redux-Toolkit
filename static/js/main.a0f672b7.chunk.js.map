{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","features/Auth/selectors.tsx","utils/redux-utils.ts","api/types.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodoListsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Application/selectors.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","app/App.tsx","app/reducers.ts","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolistsTC","createAsyncThunk","param","a","res","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","resultCode","todolist","item","changeTodolistTitleTC","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","style","marginLeft","ControlPoint","selectIsLoggedIn","auth","isLoggedIn","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","TaskStatuses","TaskPriorities","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","className","position","Checkbox","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","resultAction","rejected","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","getTasksForTodoList","renderFilterButton","buttonFilter","text","Button","Paper","padding","paddingTop","TodolistsList","useSelector","addTodolistCallback","Grid","container","spacing","flexWrap","overflowX","allTodolistTasks","width","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","reducer","tasksReducer","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","isInitialized","login","logout","setIsLoggedIn","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authReducer","initializeApp","appReducer","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","App","classes","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","maxWidth","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a0f672b7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the appActions load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web appActions is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different appActions. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Application is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5a0cdbca-9689-4621-a5f0-b22378b0e052'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {appActions} from '../features/CommonActions/App'\r\nimport {AxiosError} from 'axios'\r\nimport {ResponseType} from '../api/types'\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {TodolistType} from '../../api/types'\r\nimport {ThunkError} from '../../utils/types'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {ControlPoint} from '@material-ui/icons'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton\r\n            color=\"primary\"\r\n            onClick={addItemHandler}\r\n            disabled={disabled}\r\n            style={{marginLeft: '5px'}}\r\n        >\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n}\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, {useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            color={'secondary'}\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus onBlur={activateViewMode}\r\n            onKeyPress={onEnter}\r\n        />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from '../../../../api/types'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId, removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId, updateTask])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId, updateTask])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{ position: 'absolute', top: '2px', right: '2px'} }>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        if (!props.tasks.length) {\r\n            fetchTasks(props.todolist.id)\r\n        }\r\n    }, [demo, fetchTasks, props.todolist.id, props.tasks.length])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id, dispatch])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id, changeTodolistTitleTC])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id, changeTodolistFilter])\r\n\r\n    const getTasksForTodoList = (tasks: Array<TaskType>) => {\r\n        switch (props.todolist.filter) {\r\n            case 'active':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'contained' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n            style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                getTasksForTodoList(props.tasks).map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!getTasksForTodoList(props.tasks).length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\n\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {todolistsActions} from './index'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\nimport {Todolist} from './Todolist/TodoList';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        if (!todolists.length) {\r\n            fetchTodolistsTC()\r\n        }\r\n    }, [demo, fetchTodolistsTC, isLoggedIn, todolists.length])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <div style={{width: '300px'}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    tasks={allTodolistTasks}\r\n                                    demo={demo}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodoListsList';\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if  (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'} rel=\"noreferrer\">here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    createStyles,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Theme,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../features/Application'\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport {authActions, authSelectors, Login} from '../features/Auth'\r\nimport {selectIsInitialized, selectStatus} from '../features/Application/selectors'\r\nimport {useActions} from '../utils/redux-utils'\r\n\r\ntype PropsType = {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nconst App: React.FC<PropsType> = () => {\r\n    const classes = useStyles();\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            initializeApp()\r\n        }\r\n    }, [isInitialized, initializeApp])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [logout])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        TodoList\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container maxWidth={'xl'}>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                    <Route exact path={'/login'} render={() => <Login/>}/>\r\n\r\n                    <Route exact path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    {/*<Redirect from={'*'} to={'/404'}/>*/}\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nimport {combineReducers} from 'redux';\r\nimport {appReducer} from '../features/Application';\r\nimport {authReducer} from '../features/Auth';\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList';\r\n\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})","import thunkMiddleware from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {rootReducer} from './reducers';\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./reducers', () => {\r\n        store.replaceReducer(rootReducer)\r\n    })\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App />\r\n            </HashRouter>\r\n        </Provider>, document.getElementById('root'))\r\n\r\n}\r\nrerenderEntireTree()\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./app/App', () => {\r\n        rerenderEntireTree()\r\n    })\r\n}"],"sourceRoot":""}